name: Pull Request Workflow
on: 
  # push:
  #   branches:
  #     - 'main'
   pull_request:
     branches: [ "main" ]
  # merge_group:
   #  types: [checks_requested]


env: # Set the secret as an input
  DISABLE_LINTING: true
  # we are creating custom environment variables from context in github, these variables are then used by the scripts in our code base
  docker_username: ${{ github.actor }} # using context, using github object
  docker_password: ${{ secrets.GITHUB_TOKEN }} # using context object named secret to access available secret to runner
  GIT_COMMIT: ${{ github.sha }} # commit sha that triggered the workflow
  #GIT_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }} # not needed

jobs:
  Build:
    runs-on: ubuntu-latest
    container: gradle:6-jdk11
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4      
      - run: ci/build-app.sh
      - name: test my code
        run: ci/unit-test-app.sh
      - name: Upload my Repo
        uses: actions/upload-artifact@v4      
        with: # Parameters for the action
          name: code # Name of the artifact to upload. Optional. Default is 'artifact
          path: . # A file, directory or wildcard pattern that describes what to upload. Required.
          include-hidden-files: true
  Linting:
      name: Lint
      if: env.DISABLE_LINTING != ${{ true }}
      runs-on: ubuntu-latest
      needs: Build  # wait for build to complete because we need the artifact from build step

      permissions:
        contents: read
        packages: read
        # To report GitHub Actions status checks
        statuses: write

      steps: 
        - name: Clone down repository
          uses: actions/checkout@v4  
          with:
            fetch-depth: 0   
        #- name: Clone down repository
         # uses: actions/checkout@v4
         # with:
        #    ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}
         #   repository: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
         #   fetch-depth: 0
         
        #- name: download source code using artifact instead of cloning repo/checking out code
        #  uses: actions/download-artifact@v4
        #  with: 
        #    name: code 
        #    path: .
        
        - name: Run Super Linter
          uses: super-linter/super-linter@v7.3.0 # x-release-please-version
          env:
            # To report GitHub Actions status checks
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DEFAULT_BRANCH: main
            DISABLE_ERRORS: true

  Docker-Image:
      name: Build Application as docker image and push to GHCR
      runs-on: ubuntu-latest
      needs: [Build]  # wait for build to complete 
      permissions:
        packages: write 

      steps: 
        - name: download source code using artifact instead of cloning repo/checking out code
          uses: actions/download-artifact@v4
          with: 
            name: code 
            path: .  
        - name: build docker
          run: bash ci/build-docker.sh # using bash here to bypass file permissions, otherwise we will get a permission denied error
        - name: push docker  # this image will now be pusehd to the GitHub container registry and can be found in the Packages tab
          run: bash ci/push-docker.sh

  Component-test:
        name: Job running component tests
        runs-on: ubuntu-latest
        needs: [Docker-Image]  # wait for the application to be ready so that it can be tested

        steps:
          # we still need the source code to use the ci/component-test.sh file to test the docker image (docker image will be fetched from registry)
          - name: download source code using artifact instead of cloning repo/checking out code
            uses: actions/download-artifact@v4
            with: 
              name: code 
              path: .  
          - name: Execute component test
            run: bash ci/component-test.sh
  Performance-test:
        name: Job running performance tests
        runs-on: ubuntu-latest
        needs: [Docker-Image]  # wait for the application to be ready so that it can be tested

        steps:
          # we still need the source code to use the ci/performance-test.sh file to test the docker image (docker image will be fetched from registry)
          - name: download source code using artifact instead of cloning repo/checking out code
            uses: actions/download-artifact@v4
            with: 
              name: code 
              path: .          
          - name: Execute performance test
            run: bash ci/performance-test.sh
